#!/usr/bin/env python3
"""
Automatic installation script for the fraud detection system.

This script automatically sets up the virtual environment and 
installs all necessary dependencies.
"""

import sys
import os
import subprocess
import venv
from pathlib import Path


def create_virtual_environment():
    """Create virtual environment."""
    print("üêç Creating virtual environment...")
    
    venv_path = Path(".venv")
    if venv_path.exists():
        print("‚úÖ Virtual environment already exists")
        return True
    
    try:
        venv.create(venv_path, with_pip=True)
        print("‚úÖ Virtual environment created in .venv/")
        return True
    except Exception as e:
        print(f"‚ùå Error creating virtual environment: {e}")
        return False


def get_python_executable():
    """Get Python executable path in virtual environment."""
    if os.name == 'nt':  # Windows
        return Path(".venv/Scripts/python.exe")
    else:  # Linux/Mac
        return Path(".venv/bin/python")


def install_dependencies():
    """Install dependencies in virtual environment."""
    print("üì¶ Installing dependencies...")
    
    python_exe = get_python_executable()
    if not python_exe.exists():
        print("‚ùå Python executable not found in virtual environment")
        return False
    
    try:
        # Atualizar pip
        subprocess.run([str(python_exe), "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True, capture_output=True)
        print("‚úÖ pip atualizado")
        
        # Instalar torch primeiro (pode ser necess√°rio para PyG)
        subprocess.run([str(python_exe), "-m", "pip", "install", "torch", "torchvision"], 
                      check=True, capture_output=True)
        print("‚úÖ PyTorch instalado")
        
        # Instalar PyTorch Geometric
        subprocess.run([str(python_exe), "-m", "pip", "install", "torch-geometric"], 
                      check=True, capture_output=True)
        print("‚úÖ PyTorch Geometric instalado")
        
        # Instalar demais depend√™ncias
        if Path("requirements.txt").exists():
            subprocess.run([str(python_exe), "-m", "pip", "install", "-r", "requirements.txt"], 
                          check=True, capture_output=True)
            print("‚úÖ Depend√™ncias do requirements.txt instaladas")
        else:
            # Lista de pacotes essenciais
            packages = [
                "pandas>=1.5.0",
                "numpy>=1.21.0", 
                "scikit-learn>=1.0.0",
                "streamlit>=1.28.0",
                "plotly>=5.15.0",
                "networkx>=3.0",
                "pyyaml>=6.0",
                "loguru>=0.7.0"
            ]
            
            for package in packages:
                subprocess.run([str(python_exe), "-m", "pip", "install", package], 
                              check=True, capture_output=True)
                print(f"‚úÖ {package} instalado")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False


def verify_installation():
    """Verifica se a instala√ß√£o foi bem-sucedida."""
    print("üîç Verificando instala√ß√£o...")
    
    python_exe = get_python_executable()
    
    test_imports = [
        "import torch; print(f'PyTorch {torch.__version__}')",
        "import torch_geometric; print(f'PyG {torch_geometric.__version__}')",
        "import pandas; print(f'Pandas {pandas.__version__}')",
        "import streamlit; print(f'Streamlit {streamlit.__version__}')",
        "import plotly; print(f'Plotly {plotly.__version__}')"
    ]
    
    success = True
    for test in test_imports:
        try:
            result = subprocess.run([str(python_exe), "-c", test], 
                                  capture_output=True, text=True, check=True)
            print(f"‚úÖ {result.stdout.strip()}")
        except subprocess.CalledProcessError:
            package_name = test.split()[1].replace(';', '')
            print(f"‚ùå Falha ao importar {package_name}")
            success = False
    
    return success


def create_activation_script():
    """Cria script de ativa√ß√£o do ambiente."""
    if os.name == 'nt':  # Windows
        script_content = """@echo off
echo Ativando ambiente virtual...
call .venv\\Scripts\\activate.bat
echo ‚úÖ Ambiente ativado!
echo.
echo Comandos dispon√≠veis:
echo   python setup.py check     - Verificar sistema
echo   python setup.py demo      - Executar demo
echo   python setup.py dashboard - Lan√ßar dashboard
echo.
cmd /k
"""
        script_path = "activate.bat"
    else:  # Linux/Mac
        script_content = """#!/bin/bash
echo "Ativando ambiente virtual..."
source .venv/bin/activate
echo "‚úÖ Ambiente ativado!"
echo ""
echo "Comandos dispon√≠veis:"
echo "  python setup.py check     - Verificar sistema"
echo "  python setup.py demo      - Executar demo"
echo "  python setup.py dashboard - Lan√ßar dashboard"
echo ""
exec bash
"""
        script_path = "activate.sh"
    
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    if os.name != 'nt':
        os.chmod(script_path, 0o755)
    
    print(f"‚úÖ Script de ativa√ß√£o criado: {script_path}")


def main():
    """Fun√ß√£o principal de instala√ß√£o."""
    print("üöÄ INSTALA√á√ÉO AUTOM√ÅTICA - Sistema de Detec√ß√£o de Fraude")
    print("=" * 60)
    
    # Verificar Python
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
    
    # Passos da instala√ß√£o
    steps = [
        ("Criar ambiente virtual", create_virtual_environment),
        ("Instalar depend√™ncias", install_dependencies), 
        ("Verificar instala√ß√£o", verify_installation),
        ("Criar script de ativa√ß√£o", create_activation_script)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìã {step_name}...")
        if not step_func():
            print(f"‚ùå Falha em: {step_name}")
            sys.exit(1)
    
    # Sucesso
    print("\n" + "=" * 60)
    print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    
    print("\nüìù Pr√≥ximos passos:")
    if os.name == 'nt':
        print("1. Execute: activate.bat")
    else:
        print("1. Execute: ./activate.sh")
        print("   ou: source .venv/bin/activate")
    
    print("2. Baixe os dados do Kaggle para ieee-fraud-detection/")
    print("3. Execute: python setup.py check")
    print("4. Execute: python setup.py demo")
    
    print("\nüìö Consulte QUICK_START.md para mais informa√ß√µes")


if __name__ == "__main__":
    main()
